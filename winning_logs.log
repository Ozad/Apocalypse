/Library/Frameworks/Python.framework/Versions/3.5/bin/python3.5 /Users/step7750/PycharmProjects/CPSC231/task_9_apocalypse.py

       (                         (
       )\                      ) )\(             (
    ((((_)(  `  )  (    (  ( /(((_)\ ) `  )  (   ))\
     )\ _ )\ /(/(  )\   )\ )(_) )_(()/( /(/(  )\ /((_)
     (_)_\(_|(_)_\((_) ((_| (_)_| |(_)|(_)_\((__|__))
      / _ \ | '_ \) _ \/ _|/ _` | | || | '_ \|_-< -_)
     /_/ \_\| .__/\___/\__|\__,_|_|\_, | .__//__|___|
            |_|                    |__/|_|
        
Drawing button with text New Game
Drawing button with text Load Game
Drawing button with text Easy
Drawing button with text Medium
Drawing button with text Hard
Drawing button with text Load Game
Drawing button with text Save Game
Drawing button with text Main Menu
GENERATING MINIMAX AI MOVE
[[[0, 2, 1, 2]], 0]
AI MOVES: [[0, 2, 1, 2]]
==============

AI Results:
Move: [0, 2, 1, 2]
[[[0, 2, 1, 2]], 0]
DONE GENERATING MINIMAX AI MOVE
True
Moving The Piece At: Column: 4 and Row: 4 
			 To: Column: 3 and Row: 2
Moving The Piece At: Column: 2 and Row: 0 
			 To: Column: 2 and Row: 1
Row 3 Column 4
Pawn Type: k
Checking whether it is game over or not
Board:
['K', 'P', 'W', 'P', 'K']
['P', 'W', 'P', 'W', 'P']
['W', 'W', 'W', 'k', 'W']
['p', 'W', 'W', 'W', 'p']
['k', 'p', 'p', 'p', 'W']
GENERATING MINIMAX AI MOVE
[[[0, 4, 2, 3]], 0]
AI MOVES: [[0, 4, 2, 3]]
==============

AI Results:
Move: [0, 4, 2, 3]
[[[0, 4, 2, 3]], 0]
DONE GENERATING MINIMAX AI MOVE
True
Moving The Piece At: Column: 3 and Row: 2 
			 To: Column: 4 and Row: 0
Moving The Piece At: Column: 4 and Row: 0 
			 To: Column: 3 and Row: 2
Row 1 Column 5
Pawn Type: k
Checking whether it is game over or not
Board:
['K', 'P', 'W', 'P', 'k']
['P', 'W', 'P', 'W', 'P']
['W', 'W', 'W', 'K', 'W']
['p', 'W', 'W', 'W', 'p']
['k', 'p', 'p', 'p', 'W']
GENERATING MINIMAX AI MOVE
[[[2, 3, 4, 2]], 0]
AI MOVES: [[2, 3, 4, 2]]
==============

AI Results:
Move: [2, 3, 4, 2]
[[[2, 3, 4, 2]], 0]
DONE GENERATING MINIMAX AI MOVE
True
Moving The Piece At: Column: 4 and Row: 0 
			 To: Column: 2 and Row: 1
Moving The Piece At: Column: 3 and Row: 2 
			 To: Column: 2 and Row: 4
Row 2 Column 3
Pawn Type: k
Checking whether it is game over or not
Board:
['K', 'P', 'W', 'P', 'W']
['P', 'W', 'k', 'W', 'P']
['W', 'W', 'W', 'W', 'W']
['p', 'W', 'W', 'W', 'p']
['k', 'p', 'K', 'p', 'W']
deselected same box
GENERATING MINIMAX AI MOVE
[[[4, 2, 3, 0]], 0]
AI MOVES: [[4, 2, 3, 0]]
==============

AI Results:
Move: [4, 2, 3, 0]
[[[4, 2, 3, 0]], 0]
DONE GENERATING MINIMAX AI MOVE
Owns piece
3 4 2 4
Checking whitespace
True
Moving The Piece At: Column: 4 and Row: 3 
			 To: Column: 4 and Row: 2
Moving The Piece At: Column: 2 and Row: 4 
			 To: Column: 0 and Row: 3
Row 3 Column 5
Pawn Type: p
Checking whether it is game over or not
Board:
['K', 'P', 'W', 'P', 'W']
['P', 'W', 'k', 'W', 'P']
['W', 'W', 'W', 'W', 'p']
['K', 'W', 'W', 'W', 'W']
['k', 'p', 'W', 'p', 'W']
deselected same box
deselected same box
Drawing button with text New Game
Drawing button with text Load Game
Drawing button with text Easy
Drawing button with text Medium
Drawing button with text Hard
Drawing button with text Load Game
Drawing button with text Save Game
Drawing button with text Main Menu
deselected same box
GENERATING MINIMAX AI MOVE
[[[0, 2, 1, 2]], 0]
AI MOVES: [[0, 2, 1, 2]]
==============

AI Results:
Move: [0, 2, 1, 2]
[[[0, 2, 1, 2]], 0]
DONE GENERATING MINIMAX AI MOVE
Owns piece
4 2 3 2
Checking whitespace
True
Moving The Piece At: Column: 2 and Row: 4 
			 To: Column: 2 and Row: 3
Moving The Piece At: Column: 2 and Row: 0 
			 To: Column: 2 and Row: 1
Row 4 Column 3
Pawn Type: p
Checking whether it is game over or not
Board:
['K', 'P', 'W', 'P', 'K']
['P', 'W', 'P', 'W', 'P']
['W', 'W', 'W', 'W', 'W']
['p', 'W', 'p', 'W', 'p']
['k', 'p', 'W', 'p', 'k']
GENERATING MINIMAX AI MOVE
[[[0, 4, 2, 3]], 0]
AI MOVES: [[0, 4, 2, 3]]
==============

AI Results:
Move: [0, 4, 2, 3]
[[[0, 4, 2, 3]], 0]
DONE GENERATING MINIMAX AI MOVE
True
Both pieces going to the same location
Both are knights, detroying both
Row 3 Column 4
Pawn Type: k
Checking whether it is game over or not
Board:
['K', 'P', 'W', 'P', 'W']
['P', 'W', 'P', 'W', 'P']
['W', 'W', 'W', 'W', 'W']
['p', 'W', 'p', 'W', 'p']
['k', 'p', 'W', 'p', 'W']
GENERATING MINIMAX AI MOVE
[[[1, 0, 2, 0]], 0]
AI MOVES: [[1, 0, 2, 0]]
==============

AI Results:
Move: [1, 0, 2, 0]
[[[1, 0, 2, 0]], 0]
DONE GENERATING MINIMAX AI MOVE
Owns piece
4 1 3 1
Checking whitespace
True
Moving The Piece At: Column: 1 and Row: 4 
			 To: Column: 1 and Row: 3
Moving The Piece At: Column: 0 and Row: 1 
			 To: Column: 0 and Row: 2
Row 4 Column 2
Pawn Type: p
Checking whether it is game over or not
Board:
['K', 'P', 'W', 'P', 'W']
['W', 'W', 'P', 'W', 'P']
['P', 'W', 'W', 'W', 'W']
['p', 'p', 'p', 'W', 'p']
['k', 'W', 'W', 'p', 'W']
GENERATING MINIMAX AI MOVE
[[[2, 0, 3, 1]], 0]
AI MOVES: [[2, 0, 3, 1]]
==============

AI Results:
Move: [2, 0, 3, 1]
[[[2, 0, 3, 1]], 0]
DONE GENERATING MINIMAX AI MOVE
Owns piece
3 1 2 0
Checking diagonal
New Piece is P
Board State: [['K', 'P', 'W', 'P', 'W'], ['W', 'W', 'P', 'W', 'P'], ['P', 'W', 'W', 'W', 'W'], ['p', 'p', 'p', 'W', 'p'], ['k', 'W', 'W', 'p', 'W']]
True
Moving The Piece At: Column: 1 and Row: 3 
			 To: Column: 0 and Row: 2
Moving The Piece At: Column: 0 and Row: 2 
			 To: Column: 1 and Row: 3
Row 3 Column 1
Pawn Type: p
Checking whether it is game over or not
Board:
['K', 'P', 'W', 'P', 'W']
['W', 'W', 'P', 'W', 'P']
['p', 'W', 'W', 'W', 'W']
['p', 'P', 'p', 'W', 'p']
['k', 'W', 'W', 'p', 'W']
GENERATING MINIMAX AI MOVE
[[[0, 1, 1, 1]], 0]
AI MOVES: [[0, 1, 1, 1]]
==============

AI Results:
Move: [0, 1, 1, 1]
[[[0, 1, 1, 1]], 0]
DONE GENERATING MINIMAX AI MOVE
True
Moving The Piece At: Column: 0 and Row: 4 
			 To: Column: 1 and Row: 2
Moving The Piece At: Column: 1 and Row: 0 
			 To: Column: 1 and Row: 1
Row 3 Column 2
Pawn Type: k
Checking whether it is game over or not
Board:
['K', 'W', 'W', 'P', 'W']
['W', 'P', 'P', 'W', 'P']
['p', 'k', 'W', 'W', 'W']
['p', 'P', 'p', 'W', 'p']
['W', 'W', 'W', 'p', 'W']
GENERATING MINIMAX AI MOVE
[[[1, 2, 2, 1]], -1]
AI MOVES: [[1, 2, 2, 1]]
==============

AI Results:
Move: [1, 2, 2, 1]
[[[1, 2, 2, 1]], -1]
DONE GENERATING MINIMAX AI MOVE
Owns piece
2 0 1 1
Checking diagonal
New Piece is P
Board State: [['K', 'W', 'W', 'P', 'W'], ['W', 'P', 'P', 'W', 'P'], ['p', 'k', 'W', 'W', 'W'], ['p', 'P', 'p', 'W', 'p'], ['W', 'W', 'W', 'p', 'W']]
True
Moving The Piece At: Column: 0 and Row: 2 
			 To: Column: 1 and Row: 1
Moving The Piece At: Column: 2 and Row: 1 
			 To: Column: 1 and Row: 2
Row 2 Column 2
Pawn Type: p
Checking whether it is game over or not
Board:
['K', 'W', 'W', 'P', 'W']
['W', 'p', 'W', 'W', 'P']
['W', 'P', 'W', 'W', 'W']
['p', 'P', 'p', 'W', 'p']
['W', 'W', 'W', 'p', 'W']
GENERATING MINIMAX AI MOVE
[[[2, 1, 3, 0]], -1]
AI MOVES: [[2, 1, 3, 0]]
==============

AI Results:
Move: [2, 1, 3, 0]
[[[2, 1, 3, 0]], -1]
DONE GENERATING MINIMAX AI MOVE
Owns piece
3 2 2 1
Checking diagonal
New Piece is P
Board State: [['K', 'W', 'W', 'P', 'W'], ['W', 'p', 'W', 'W', 'P'], ['W', 'P', 'W', 'W', 'W'], ['p', 'P', 'p', 'W', 'p'], ['W', 'W', 'W', 'p', 'W']]
True
Moving The Piece At: Column: 2 and Row: 3 
			 To: Column: 1 and Row: 2
Moving The Piece At: Column: 1 and Row: 2 
			 To: Column: 0 and Row: 3
Row 3 Column 2
Pawn Type: p
Checking whether it is game over or not
Board:
['K', 'W', 'W', 'P', 'W']
['W', 'p', 'W', 'W', 'P']
['W', 'p', 'W', 'W', 'W']
['P', 'P', 'W', 'W', 'p']
['W', 'W', 'W', 'p', 'W']
GENERATING MINIMAX AI MOVE
[[[0, 0, 2, 1]], 4]
AI MOVES: [[0, 0, 2, 1]]
==============

AI Results:
Move: [0, 0, 2, 1]
[[[0, 0, 2, 1]], 4]
DONE GENERATING MINIMAX AI MOVE
Owns piece
1 1 0 0
Checking diagonal
New Piece is K
Board State: [['K', 'W', 'W', 'P', 'W'], ['W', 'p', 'W', 'W', 'P'], ['W', 'p', 'W', 'W', 'W'], ['P', 'P', 'W', 'W', 'p'], ['W', 'W', 'W', 'p', 'W']]
True
Moving The Piece At: Column: 1 and Row: 1 
			 To: Column: 0 and Row: 0
Moving The Piece At: Column: 0 and Row: 0 
			 To: Column: 1 and Row: 2
Row 1 Column 1
Pawn Type: p
Player pawn got to the last rank, checking how many knights they have
Changing piece to a knight
Moving The Piece At: Column: 1 and Row: 1 
			 To: Column: 0 and Row: 0
Checking whether it is game over or not
Board:
['k', 'W', 'W', 'P', 'W']
['W', 'W', 'W', 'W', 'P']
['W', 'K', 'W', 'W', 'W']
['P', 'P', 'W', 'W', 'p']
['W', 'W', 'W', 'p', 'W']
GENERATING MINIMAX AI MOVE
[[[2, 1, 4, 2]], 3]
AI MOVES: [[2, 1, 4, 2]]
==============

AI Results:
Move: [2, 1, 4, 2]
[[[2, 1, 4, 2]], 3]
DONE GENERATING MINIMAX AI MOVE
True
Moving The Piece At: Column: 0 and Row: 0 
			 To: Column: 1 and Row: 2
Moving The Piece At: Column: 1 and Row: 2 
			 To: Column: 2 and Row: 4
Row 3 Column 2
Pawn Type: k
Checking whether it is game over or not
Board:
['W', 'W', 'W', 'P', 'W']
['W', 'W', 'W', 'W', 'P']
['W', 'k', 'W', 'W', 'W']
['P', 'P', 'W', 'W', 'p']
['W', 'W', 'K', 'p', 'W']
GENERATING MINIMAX AI MOVE
[[[4, 2, 3, 4]], 4]
AI MOVES: [[4, 2, 3, 4]]
==============

AI Results:
Move: [4, 2, 3, 4]
[[[4, 2, 3, 4]], 4]
DONE GENERATING MINIMAX AI MOVE
Owns piece
3 4 2 4
Checking whitespace
True
Moving The Piece At: Column: 4 and Row: 3 
			 To: Column: 4 and Row: 2
Moving The Piece At: Column: 2 and Row: 4 
			 To: Column: 4 and Row: 3
Row 3 Column 5
Pawn Type: p
Checking whether it is game over or not
Board:
['W', 'W', 'W', 'P', 'W']
['W', 'W', 'W', 'W', 'P']
['W', 'k', 'W', 'W', 'p']
['P', 'P', 'W', 'W', 'K']
['W', 'W', 'W', 'p', 'W']
GENERATING MINIMAX AI MOVE
[[[3, 4, 2, 2]], 4]
AI MOVES: [[3, 4, 2, 2]]
==============

AI Results:
Move: [3, 4, 2, 2]
[[[3, 4, 2, 2]], 4]
DONE GENERATING MINIMAX AI MOVE
True
Moving The Piece At: Column: 1 and Row: 2 
			 To: Column: 2 and Row: 4
Moving The Piece At: Column: 4 and Row: 3 
			 To: Column: 2 and Row: 2
Row 5 Column 3
Pawn Type: k
Checking whether it is game over or not
Board:
['W', 'W', 'W', 'P', 'W']
['W', 'W', 'W', 'W', 'P']
['W', 'W', 'K', 'W', 'p']
['P', 'P', 'W', 'W', 'W']
['W', 'W', 'k', 'p', 'W']
GENERATING MINIMAX AI MOVE
[[[2, 2, 4, 3]], 4]
AI MOVES: [[2, 2, 4, 3]]
==============

AI Results:
Move: [2, 2, 4, 3]
[[[2, 2, 4, 3]], 4]
DONE GENERATING MINIMAX AI MOVE
Owns piece
4 3 3 3
Checking whitespace
True
Moving The Piece At: Column: 3 and Row: 4 
			 To: Column: 3 and Row: 3
Moving The Piece At: Column: 2 and Row: 2 
			 To: Column: 3 and Row: 4
Row 4 Column 4
Pawn Type: p
Checking whether it is game over or not
Board:
['W', 'W', 'W', 'P', 'W']
['W', 'W', 'W', 'W', 'P']
['W', 'W', 'W', 'W', 'p']
['P', 'P', 'W', 'p', 'W']
['W', 'W', 'k', 'K', 'W']
GENERATING MINIMAX AI MOVE
[[[4, 3, 2, 4]], inf]
AI MOVES: [[4, 3, 2, 4]]
==============

AI Results:
Move: [4, 3, 2, 4]
[[[4, 3, 2, 4]], inf]
DONE GENERATING MINIMAX AI MOVE
True
Moving The Piece At: Column: 2 and Row: 4 
			 To: Column: 0 and Row: 3
Moving The Piece At: Column: 3 and Row: 4 
			 To: Column: 4 and Row: 2
Row 4 Column 1
Pawn Type: k
Checking whether it is game over or not
Board:
['W', 'W', 'W', 'P', 'W']
['W', 'W', 'W', 'W', 'P']
['W', 'W', 'W', 'W', 'K']
['k', 'P', 'W', 'p', 'W']
['W', 'W', 'W', 'W', 'W']
GENERATING MINIMAX AI MOVE
[[[0, 3, 1, 3]], inf]
AI MOVES: [[0, 3, 1, 3]]
==============

AI Results:
Move: [0, 3, 1, 3]
[[[0, 3, 1, 3]], inf]
DONE GENERATING MINIMAX AI MOVE
True
Moving The Piece At: Column: 0 and Row: 3 
			 To: Column: 2 and Row: 2
Moving The Piece At: Column: 3 and Row: 0 
			 To: Column: 3 and Row: 1
Row 3 Column 3
Pawn Type: k
Checking whether it is game over or not
Board:
['W', 'W', 'W', 'W', 'W']
['W', 'W', 'W', 'P', 'P']
['W', 'W', 'k', 'W', 'K']
['W', 'P', 'W', 'p', 'W']
['W', 'W', 'W', 'W', 'W']
GENERATING MINIMAX AI MOVE
[[[1, 3, 2, 2]], inf]
AI MOVES: [[1, 3, 2, 2]]
==============

AI Results:
Move: [1, 3, 2, 2]
[[[1, 3, 2, 2]], inf]
DONE GENERATING MINIMAX AI MOVE
True
Moving The Piece At: Column: 2 and Row: 2 
			 To: Column: 4 and Row: 1
Moving The Piece At: Column: 3 and Row: 1 
			 To: Column: 2 and Row: 2
Row 2 Column 5
Pawn Type: k
Checking whether it is game over or not
Board:
['W', 'W', 'W', 'W', 'W']
['W', 'W', 'W', 'W', 'k']
['W', 'W', 'P', 'W', 'K']
['W', 'P', 'W', 'p', 'W']
['W', 'W', 'W', 'W', 'W']
GENERATING MINIMAX AI MOVE
[[[2, 2, 3, 3]], inf]
AI MOVES: [[2, 2, 3, 3]]
==============

AI Results:
Move: [2, 2, 3, 3]
[[[2, 2, 3, 3]], inf]
DONE GENERATING MINIMAX AI MOVE
Owns piece
3 3 2 4
Checking diagonal
New Piece is K
Board State: [['W', 'W', 'W', 'W', 'W'], ['W', 'W', 'W', 'W', 'k'], ['W', 'W', 'P', 'W', 'K'], ['W', 'P', 'W', 'p', 'W'], ['W', 'W', 'W', 'W', 'W']]
True
Moving The Piece At: Column: 3 and Row: 3 
			 To: Column: 4 and Row: 2
Moving The Piece At: Column: 2 and Row: 2 
			 To: Column: 3 and Row: 3
Row 3 Column 5
Pawn Type: p
Checking whether it is game over or not
Board:
['W', 'W', 'W', 'W', 'W']
['W', 'W', 'W', 'W', 'k']
['W', 'W', 'W', 'W', 'p']
['W', 'P', 'W', 'P', 'W']
['W', 'W', 'W', 'W', 'W']
deselected same box
GENERATING MINIMAX AI MOVE
[[[3, 3, 4, 3]], inf]
AI MOVES: [[3, 3, 4, 3]]
==============

AI Results:
Move: [3, 3, 4, 3]
[[[3, 3, 4, 3]], inf]
DONE GENERATING MINIMAX AI MOVE
True
Upgraded AI pawn to knight
Moving The Piece At: Column: 4 and Row: 1 
			 To: Column: 3 and Row: 3
Moving The Piece At: Column: 3 and Row: 3 
			 To: Column: 3 and Row: 4
Row 4 Column 4
Pawn Type: k
Checking whether it is game over or not
Board:
['W', 'W', 'W', 'W', 'W']
['W', 'W', 'W', 'W', 'W']
['W', 'W', 'W', 'W', 'p']
['W', 'P', 'W', 'k', 'W']
['W', 'W', 'W', 'K', 'W']
deselected same box
deselected same box
GENERATING MINIMAX AI MOVE
[[[4, 3, 2, 4]], inf]
AI MOVES: [[4, 3, 2, 4]]
==============

AI Results:
Move: [4, 3, 2, 4]
[[[4, 3, 2, 4]], inf]
DONE GENERATING MINIMAX AI MOVE
Owns piece
2 4 1 4
Checking whitespace
True
Moving The Piece At: Column: 4 and Row: 2 
			 To: Column: 4 and Row: 1
Moving The Piece At: Column: 3 and Row: 4 
			 To: Column: 4 and Row: 2
Row 2 Column 5
Pawn Type: p
Checking whether it is game over or not
Board:
['W', 'W', 'W', 'W', 'W']
['W', 'W', 'W', 'W', 'p']
['W', 'W', 'W', 'W', 'K']
['W', 'P', 'W', 'k', 'W']
['W', 'W', 'W', 'W', 'W']
GENERATING MINIMAX AI MOVE
Exception in Tkinter callback
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/tkinter/__init__.py", line 1549, in __call__
    return self.func(*args)
  File "/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/turtle.py", line 675, in eventfun
    fun(x, y)
  File "/Users/step7750/PycharmProjects/CPSC231/task_9_apocalypse.py", line 1012, in onclick_board_handler
    ai_type_val = get_piece(ai_val[0], ai_val[1])
  File "/Users/step7750/PycharmProjects/CPSC231/task_9_apocalypse.py", line 682, in get_piece
    return string_array[row][column]
TypeError: list indices must be integers or slices, not list
[[[]], -inf]
Doing random move to the board
AI MOVES: [[2, 4, 4, 3], 0]
==============

AI Results:
Move: [[2, 4, 4, 3], 0]
[[[2, 4, 4, 3], 0], -inf]
