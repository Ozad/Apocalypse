import turtle

wn = turtle.Screen()
draw = turtle.Turtle()
BOARD_DIMENSION = wn.window_width() * 0.75
box_locations = [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                 [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                 [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                 [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                 [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]]


def select(x,y):

    for row in range(5):
        for column in range(5):
            if x >= box_locations[row][column][0] and x <= box_locations[row][column][0]+BOARD_DIMENSION/5 and y >= box_locations[row][column][1] and y <= box_locations[row][column][1]+BOARD_DIMENSION/5:
                draw.reset()        #box_locations[row][column][0] :
                draw.color("red")
                draw.speed(0)
                draw.up()
                draw.goto(box_locations[row-1][column][0],box_locations[row-1][column][1])
                draw.down()
                draw.ht()
                for i in range(4):
                    draw.forward(BOARD_DIMENSION/5)
                    draw.right(90)

def draw_board(BOARD_DIMENSION):

    main_board = turtle.Turtle()
    main_board.up()
    # set color to something a bit lighter than background
    main_board.color("#5E5E5E")
    main_board.speed(0)


    # center the board, -10 is a static offset
    main_board.goto(-(BOARD_DIMENSION/2) - 10, BOARD_DIMENSION/2)

    # create outer rectangle
    main_board.down()
    main_board.pendown()

    for i in range(4):
        main_board.forward(BOARD_DIMENSION)
        main_board.right(90)
    main_board.penup()

    # move turtle back to top left of the board
    main_board.goto(-(BOARD_DIMENSION/2) - 10, BOARD_DIMENSION/2)

    # iterate through each box and draw it
    for row in range(0, 5):
        for column in range(0, 5):

            box_locations[row][column][0] = main_board.xcor()
            box_locations[row][column][1] = main_board.ycor()

            if row % 2 == 0:
                # Check whether there is an even column
                if column % 2 == 0:
                    # print out a block
                    main_board.begin_fill()
                    for i in range(4):
                        main_board.forward(BOARD_DIMENSION/5)
                        main_board.right(90)
                    main_board.end_fill()
            else:
                # row is 1, 3
                # Check whether it is an odd column
                if column % 2 != 0:
                    main_board.begin_fill()
                    for i in range(4):
                        main_board.forward(BOARD_DIMENSION/5)
                        main_board.right(90)
                    main_board.end_fill()

            # move the turtle to the right for the distance of one block
            main_board.setx(main_board.xcor() + (BOARD_DIMENSION/5))

        # reset x position each time a row is done (to the very left), move the turtle down one block
        main_board.setpos(-(BOARD_DIMENSION/2) - 10, (main_board.ycor() - (BOARD_DIMENSION/5)))


draw_board(BOARD_DIMENSION)

wn.onscreenclick(select,1)

turtle.done()


